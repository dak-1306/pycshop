import { useState, useEffect } from "react";

// Mock data
const INITIAL_PRODUCTS = [
  {
    id: 1,
    image: null,
    name: "iPhone 15 Pro Max",
    price: "29,990,000",
    quantity: 50,
    category: "ƒêi·ªán tho·∫°i",
    status: "C√≤n h√†ng",
    description:
      "iPhone 15 Pro Max v·ªõi chip A17 Pro m·∫°nh m·∫Ω, camera chuy√™n nghi·ªáp 48MP, m√†n h√¨nh Super Retina XDR 6.7 inch, khung titan cao c·∫•p v√† pin l√¢u d√†i. Thi·∫øt k·∫ø sang tr·ªçng, hi·ªáu nƒÉng v∆∞·ª£t tr·ªôi.",
    actions: ["view", "edit", "delete"],
  },
  {
    id: 2,
    image: null,
    name: "Samsung Galaxy S24 Ultra",
    price: "26,990,000",
    quantity: 30,
    category: "ƒêi·ªán tho·∫°i",
    status: "C√≤n h√†ng",
    description:
      "Samsung Galaxy S24 Ultra v·ªõi S Pen t√≠ch h·ª£p, camera 200MP si√™u n√©t, m√†n h√¨nh Dynamic AMOLED 6.8 inch, chip Snapdragon 8 Gen 3 v√† t√≠nh nƒÉng AI th√¥ng minh. Tr·∫£i nghi·ªám flagship ƒë·ªânh cao.",
    actions: ["view", "edit", "delete"],
  },
  {
    id: 3,
    image: null,
    name: "MacBook Air M3",
    price: "32,990,000",
    quantity: 0,
    category: "Laptop",
    status: "H·∫øt h√†ng",
    description:
      "MacBook Air M3 v·ªõi thi·∫øt k·∫ø si√™u m·ªèng, chip M3 8-core m·∫°nh m·∫Ω, m√†n h√¨nh Liquid Retina 13.6 inch, th·ªùi l∆∞·ª£ng pin l√™n ƒë·∫øn 18 gi·ªù. Ho√†n h·∫£o cho c√¥ng vi·ªác v√† s√°ng t·∫°o.",
    actions: ["view", "edit", "delete"],
  },
  {
    id: 4,
    image: null,
    name: "iPad Pro 12.9",
    price: "24,990,000",
    quantity: 15,
    category: "M√°y t√≠nh b·∫£ng",
    status: "C√≤n h√†ng",
    description:
      "iPad Pro 12.9 inch v·ªõi chip M2, m√†n h√¨nh Liquid Retina XDR, h·ªó tr·ª£ Apple Pencil Gen 2 v√† Magic Keyboard. C√¥ng c·ª• s√°ng t·∫°o chuy√™n nghi·ªáp trong t·∫ßm tay.",
    actions: ["view", "edit", "delete"],
  },
  {
    id: 5,
    image: null,
    name: "AirPods Pro 2",
    price: "6,990,000",
    quantity: 25,
    category: "Ph·ª• ki·ªán",
    status: "C√≤n h√†ng",
    description:
      "AirPods Pro 2 v·ªõi chip H2, ch·ªëng ·ªìn ch·ªß ƒë·ªông n√¢ng c·∫•p, √¢m thanh kh√¥ng gian c√° nh√¢n h√≥a, th·ªùi l∆∞·ª£ng pin 6 gi·ªù v√† h·ªôp s·∫°c MagSafe. Tr·∫£i nghi·ªám √¢m thanh ƒë·ªânh cao.",
    actions: ["view", "edit", "delete"],
  },
];

const INITIAL_FORM_STATE = {
  name: "",
  price: "",
  quantity: "",
  category: "",
  status: "C√≤n h√†ng",
  image: null,
  description: "",
};

export const useProducts = () => {
  // Products state
  const [products, setProducts] = useState([]);

  // Form and modal states
  const [currentProduct, setCurrentProduct] = useState(INITIAL_FORM_STATE);
  const [modalMode, setModalMode] = useState("add");
  const [showProductModal, setShowProductModal] = useState(false);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [productToDelete, setProductToDelete] = useState(null);

  // Filter states
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("");
  const [selectedStatus, setSelectedStatus] = useState("");
  const [selectedPrice, setSelectedPrice] = useState("");
  const [currentPage, setCurrentPage] = useState(1);

  // Initialize products
  useEffect(() => {
    setProducts(INITIAL_PRODUCTS);
  }, []);

  // Product operations
  const handleViewProduct = (productId) => {
    const product = products.find((p) => p.id === productId);
    if (product) {
      setCurrentProduct(product);
      setShowDetailModal(true);
    }
  };

  const handleAddProduct = () => {
    setModalMode("add");
    setCurrentProduct(INITIAL_FORM_STATE);
    setShowProductModal(true);
  };

  const handleEditProduct = (productId) => {
    const product = products.find((p) => p.id === productId);
    if (product) {
      setModalMode("edit");
      setCurrentProduct({
        ...product,
        price: product.price.replace(/,/g, ""), // Remove commas for editing
      });
      setShowProductModal(true);
    }
  };

  const handleSaveProduct = () => {
    if (
      !currentProduct.name ||
      !currentProduct.price ||
      !currentProduct.quantity ||
      !currentProduct.category
    ) {
      alert("üò± Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }

    if (modalMode === "add") {
      const newProduct = {
        id: products.length + 1,
        name: currentProduct.name,
        price: Number(currentProduct.price).toLocaleString(),
        quantity: Number(currentProduct.quantity),
        category: currentProduct.category,
        status: currentProduct.quantity > 0 ? "C√≤n h√†ng" : "H·∫øt h√†ng",
        image: currentProduct.image,
        description: currentProduct.description || "",
        actions: ["view", "edit", "delete"],
      };
      setProducts([...products, newProduct]);
      alert("üéâ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
    } else {
      const updatedProducts = products.map((product) =>
        product.id === currentProduct.id
          ? {
              ...currentProduct,
              price: Number(currentProduct.price).toLocaleString(),
              quantity: Number(currentProduct.quantity),
              status:
                Number(currentProduct.quantity) > 0 ? "C√≤n h√†ng" : "H·∫øt h√†ng",
            }
          : product
      );
      setProducts(updatedProducts);
      alert("üéâ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
    }

    handleCloseProductModal();
  };

  const handleDeleteProduct = (productId) => {
    const product = products.find((p) => p.id === productId);
    if (product) {
      setProductToDelete(product);
      setShowDeleteModal(true);
    }
  };

  const confirmDeleteProduct = () => {
    if (productToDelete) {
      const updatedProducts = products.filter(
        (product) => product.id !== productToDelete.id
      );
      setProducts(updatedProducts);
      setShowDeleteModal(false);
      setProductToDelete(null);
      alert("üóëÔ∏è ƒê√£ x√≥a s·∫£n ph·∫©m th√†nh c√¥ng!");
    }
  };

  // Modal operations
  const handleCloseProductModal = () => {
    setShowProductModal(false);
    setCurrentProduct(INITIAL_FORM_STATE);
  };

  const handleCloseDetailModal = () => {
    setShowDetailModal(false);
  };

  const handleCloseDeleteModal = () => {
    setShowDeleteModal(false);
    setProductToDelete(null);
  };

  // Filter operations
  const handleResetFilters = () => {
    setSearchTerm("");
    setSelectedCategory("");
    setSelectedStatus("");
    setSelectedPrice("");
    setCurrentPage(1);
  };

  // Export functionality
  const handleExport = () => {
    const headers = [
      "ID",
      "T√™n s·∫£n ph·∫©m",
      "Gi√° (ƒë)",
      "S·ªë l∆∞·ª£ng",
      "Danh m·ª•c",
      "Tr·∫°ng th√°i",
    ];
    const csvContent = [
      headers.join(","),
      ...products.map((product) =>
        [
          product.id,
          `"${product.name}"`,
          `"${product.price}"`,
          product.quantity,
          `"${product.category}"`,
          `"${product.status}"`,
        ].join(",")
      ),
    ].join("\n");

    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute(
      "download",
      `san-pham-${new Date().toISOString().split("T")[0]}.csv`
    );
    link.style.visibility = "hidden";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    alert("üìä ƒê√£ xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!");
  };

  // Utility functions
  const getStatusColor = (status) => {
    switch (status) {
      case "C√≤n h√†ng":
        return "text-green-600 bg-green-100";
      case "H·∫øt h√†ng":
        return "text-red-600 bg-red-100";
      case "Ng·ª´ng b√°n":
        return "text-gray-600 bg-gray-100";
      default:
        return "text-gray-600 bg-gray-100";
    }
  };

  return {
    // State
    products,
    currentProduct,
    setCurrentProduct,
    modalMode,
    showProductModal,
    showDetailModal,
    showDeleteModal,
    productToDelete,
    searchTerm,
    setSearchTerm,
    selectedCategory,
    setSelectedCategory,
    selectedStatus,
    setSelectedStatus,
    selectedPrice,
    setSelectedPrice,
    currentPage,
    setCurrentPage,

    // Actions
    handleViewProduct,
    handleAddProduct,
    handleEditProduct,
    handleSaveProduct,
    handleDeleteProduct,
    confirmDeleteProduct,
    handleCloseProductModal,
    handleCloseDetailModal,
    handleCloseDeleteModal,
    handleResetFilters,
    handleExport,
    getStatusColor,
  };
};
